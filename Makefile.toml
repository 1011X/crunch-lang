# Build in release mode and rebuild std
[tasks.build-release]
condition = { channels = ["nightly"] }
command = "cargo"
args = ["+nightly", "build", "--release", "-Z", "build-std", "--target", "${CARGO_MAKE_RUST_TARGET_TRIPLE}"]

[tasks.install-native-deps]
private = true
condition = { env_set = ["PACKAGES"] }
script = ['''
for pkg in ${PACKAGES}; do
    if ! dpkg-query -W -f='${Status}' nano | grep "ok installed"; then
        sudo apt install -y $pkg
    fi
done
''']

[tasks.fuzz]
private = true
condition = { env_set = "FUZZ_TARGET" }
env = { "HFUZZ_RUN_ARGS" = "--threads=16 --verifier --linux_perf_instr --linux_perf_branch --timeout=1 --tmout_sigvtalrm", "PACKAGES" = "build-essential binutils-dev libunwind-dev libblocksruntime-dev" }
dependencies = ["install-native-deps"]
install_crate = { crate_name = "honggfuzz", binary = "cargo", test_arg = ["hfuzz", "version"] }
script = ['''
cd crunch-fuzzing
cargo hfuzz run ${FUZZ_TARGET} --color=always
''']

[tasks.fuzz-parser]
env = { "FUZZ_TARGET" = "parser" }
dependencies = ["fuzz"]

[tasks.flamegraph]
env = { "RUSTFLAGS" = "-C debuginfo=2", "PACKAGES" = "linux-tools-common linux-tools-generic" }
install_crate = { crate_name = "flamegraph", binary = "cargo", test_arg = ["flamegraph", "--help"] }
dependencies = ["install-native-deps"]
install_script = ['''
# https://github.com/flamegraph-rs/flamegraph#enabling-perf-for-use-by-unprivileged-users
echo -1 | sudo tee /proc/sys/kernel/perf_event_paranoid
''']
command = "cargo"
args = ["flamegraph"]

[tasks.set-sanitizer-args]
private = true
condition = { env_set = ["SANITIZER_TYPE"] }
env = { "RUSTFLAGS" = "-Z sanitizer=${SANITIZER_TYPE}" }

[tasks.sanitize-address]
env = { "SANITIZER_TYPE" = "address" }
dependencies = ["set-sanitizer-args"]
command = "cargo"
args = ["test", "--", "--nocapture"]

[tasks.sanitize-leak]
env = { "SANITIZER_TYPE" = "leak" }
dependencies = ["set-sanitizer-args"]
command = "cargo"
args = ["test", "--", "--nocapture"]

[tasks.sanitize-memory]
env = { "SANITIZER_TYPE" = "memory" }
dependencies = ["set-sanitizer-args"]
command = "cargo"
args = ["test", "--", "--nocapture"]

[tasks.sanitize-thread]
env = { "SANITIZER_TYPE" = "thread" }
dependencies = ["set-sanitizer-args"]
command = "cargo"
args = ["test", "--", "--nocapture"]
