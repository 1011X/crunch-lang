name: CI

on:
  pull_request:
    paths:
      - "**.rs"
      - "**.toml"
      - ".github/workflows/ci.yml"
  push:
    branches: [master]
    paths:
      - "**.rs"
      - "**.toml"
      - ".github/workflows/ci.yml"

jobs:
  Check_Formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: nightly
          components: rustfmt
      - name: Check Formatting
        run: cargo fmt --all -- --check

  Tests:
    strategy:
      fail-fast: false
      matrix:
        rust_version: [nightly]
        platform:
          # Windows MSVC 32 and 64bit
          - { target: x86_64-pc-windows-msvc, os: windows-latest }
          - { target: i686-pc-windows-msvc, os: windows-latest }

          # Windows GNU 32 and 64bit
          - {
              target: x86_64-pc-windows-gnu,
              os: windows-latest,
              host: -x86_64-pc-windows-gnu,
            }
          - {
              target: i686-pc-windows-gnu,
              os: windows-latest,
              host: -i686-pc-windows-gnu,
            }

          # Linux 32 and 64bit
          - { target: i686-unknown-linux-gnu, os: ubuntu-latest }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest }

          # OSX 64bit
          - { target: x86_64-apple-darwin, os: macos-latest }

          # TODO: once WASM is possible, test it

    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-C debuginfo=0"
      FEATURES: ${{ format(',{0}', matrix.platform.features ) }}

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1

      - name: Cache cargo folder
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ matrix.platform.target }}-cargo-${{ matrix.rust_version }}

      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust_version }}${{ matrix.platform.host }}
          targets: ${{ matrix.platform.target }}

      - name: Check documentation
        shell: bash
        run: cargo doc --no-deps --target ${{ matrix.platform.target }} --features $FEATURES

      - name: Build
        shell: bash
        run: cargo build --verbose --target ${{ matrix.platform.target }} --features $FEATURES

      - name: Run tests debug
        shell: bash
        run: cargo test --verbose --target ${{ matrix.platform.target }} --features $FEATURES

      - name: Run tests release
        shell: bash
        run: cargo test --release --verbose --target ${{ matrix.platform.target }} --features $FEATURES
