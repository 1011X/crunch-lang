name: CI

on:
  pull_request:
    paths:
      - "**.rs"
      - "**.toml"
      - ".github/workflows/*.yml"
  push:
    branches: [master, dev]
    paths:
      - "**.rs"
      - "**.toml"
      - ".github/workflows/*.yml"

jobs:
  Checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      
    steps:
      - uses: actions/checkout@v1
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: nightly
          components: rustfmt
        
      # Check that formatting is valid
      - name: Check Formatting
        run: cargo fmt --all -- --check
        
      # Check that documentation is valid
      - name: Check documentation
        shell: bash
        run: cargo doc --no-deps --target ${{ matrix.target }}
      
      # TODO: Code Coverage
      
      # Cache Cargo
      - name: Cache Cargo
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: nightly-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      # Cache Build
      - name: Cache Build
        uses: actions/cache@v1
        with:
          path: target
          key: nightly-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

  Tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:  
        include:
          # Windows MSVC 32 and 64bit
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            rust_version: nightly
            features: ""
            name: x86_64-pc-windows-msvc-nightly
          - os: windows-latest
            target: i686-pc-windows-msvc
            rust_version: nightly
            features: ""
            name: i686-pc-windows-msvc-nightly

          # Windows GNU 32 and 64bit
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            rust_version: nightly
            host: -x86_64-pc-windows-gnu
            features: ""
            name: i686-pc-windows-gnu-nightly
          - os: windows-latest
            target: i686-pc-windows-gnu
            rust_version: nightly
            host: -i686-pc-windows-gnu
            features: ""
            name: i686-pc-windows-gnu-nightly

          # Linux 32 and 64bit
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            rust_version: nightly
            features: ""
            name: i686-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rust_version: nightly
            features: ""
            name: x86_64-unknown-linux-gnu

          # OSX 64bit
          - os: macos-latest
            target: x86_64-apple-darwin
            rust_version: nightly
            features: ""
            name: x86_64-apple-darwin

          # TODO: once WASM is possible, test it

    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-C debuginfo=0"
      FEATURES: ${{ format(',{0}', matrix.features ) }}

    steps:
      - uses: actions/checkout@v1
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust_version }}${{ matrix.platform.host }}
          targets: ${{ matrix.platform.target }}

      # Run tests in debug mode
      - name: Run tests debug
        shell: bash
        run: cargo test --verbose --target ${{ matrix.target }} --features $FEATURES
      
      # Run tests in release mode
      - name: Run tests release
        shell: bash
        run: cargo test --release --verbose --target ${{ matrix.target }} --features $FEATURES
        
      # Cache Cargo
      - name: Cache Cargo
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: nightly-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      # Cache Build
      - name: Cache Build
        uses: actions/cache@v1
        with:
          path: target
          key: nightly-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
