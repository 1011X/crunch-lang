name: CI

on: [pull_request, push]

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install cargo-hack

      - uses: actions-rs/cargo@v1
        with:
          command: hack check --each-feature --no-dev-deps
      - uses: actions-rs/cargo@v1
        with:
          command: hack
          args: check --feature-powerset --no-dev-deps

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check --locked

  doc:
    name: Docs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --all --document-private-items --no-deps --locked

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings --locked

  test:
    name: Test ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - x86_64-apple-darwin
          - wasm32-unknown-unknown
        experimental: [false]
        custom-features: [false]
        features: []

        include:
          # Windows
          - name: x86_64-pc-windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: i686-pc-windows-msvc
            os: windows-latest
            target: i686-pc-windows-msvc

          # Linux
          - name: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: i686-unknown-linux-gnu
            os: ubuntu-latest
            target: i686-unknown-linux-gnu

          # OSX
          - name: x86_64-apple-darwin
            os: macos-latest
            target: x86_64-apple-darwin
            experimental: true

    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install cargo-hack
      - name: Set rustc version
        run: echo "::set-env name=CURRENT_RUSTC_VERSION::$(rustc -V)"

      - name: Cache Cargo Registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo Bin
        uses: actions/cache@v1
        with:
          path: ~/.cargo/bin
          key: ${{ matrix.os }}-cargo-bin-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo Git
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ matrix.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo Build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ matrix.os }}-cargo-build-target-${{ env.CURRENT_RUSTC_VERSION }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Test each feature
        if: ${{ !matrix.custom-features }}
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: test --target ${{ matrix.target }} --workspace --locked --each-feature

      - name: Test all powersets
        if: ${{ !matrix.custom-features }}
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: test --target ${{ matrix.target }} --workspace --locked --feature-powerset

  miri:
    name: Miri ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        rust:
          - nightly
        os:
          - windows-latest
          - ubuntu-latest
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu

        include:
          # Windows
          - name: x86_64-pc-windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: i686-pc-windows-msvc
            os: windows-latest
            target: i686-pc-windows-msvc

          # Linux
          - name: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: i686-unknown-linux-gnu
            os: ubuntu-latest
            target: i686-unknown-linux-gnu

    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - run: rustup component add miri
      - uses: actions-rs/cargo@v1
        with:
          command: install cargo-hack
      - name: Set rustc version
        run: echo "::set-env name=CURRENT_RUSTC_VERSION::$(rustc -V)"

      - name: Cache Cargo Registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo Bin
        uses: actions/cache@v1
        with:
          path: ~/.cargo/bin
          key: ${{ matrix.os }}-cargo-bin-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo Git
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ matrix.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo Build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ matrix.os }}-cargo-build-target-${{ env.CURRENT_RUSTC_VERSION }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Miri
        shell: bash
        run: |
          for crate in crates/*; do
              if [ "$crate" != "crates/crunch-fuzzing" ]; then
                  cd $crate
                  cargo +nightly miri test
                  cd ../..
              fi
          done

  fuzzing:
    name: Check Fuzzing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - shell: bash
        run: cd crates/crunch-fuzzing
      - uses: actions-rs/cargo@v1
        with:
          command: check

  wasm:
    name: WASM
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: wasm32-unknown-unknown
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --locked --target wasm32-unknown-unknown
