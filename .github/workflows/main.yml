name: CI

on:
  pull_request:
    paths:
      - "**.rs"
      - "**.toml"
      - ".github/workflows/main.yml"
  push:
    branches: [master]
    paths:
      - "**.rs"
      - "**.toml"
      - ".github/workflows/main.yml"

jobs:
  Checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v1
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: nightly
          components: rustfmt

      # Check that formatting is valid
      - name: Check Formatting
        run: cargo fmt --all -- --check

      # Check that documentation is valid
      - name: Check Documentation
        run: cargo doc --no-deps

      # Cache Cargo
      - name: Cache Cargo
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: nightly-x86_64-unknown-linux-gnu-cargo-index-checks-${{ hashFiles('**/Cargo.lock') }}

      # Cache Build
      - name: Cache Build
        uses: actions/cache@v1
        with:
          path: target
          key: nightly-x86_64-unknown-linux-gnu-cargo-build-checks-${{ hashFiles('**/Cargo.lock') }}

  Tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-pc-windows-msvc, i686-pc-windows-msvc, x86_64-pc-windows-gnu, i686-pc-windows-gnu, x86_64-unknown-linux-gnu, i686-unknown-linux-gnu, x86_64-apple-darwin]        
        include:
          # Windows MSVC 32 and 64bit
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            rust_version: nightly
            name: x86_64-pc-windows-msvc-nightly
          - os: windows-latest
            target: i686-pc-windows-msvc
            rust_version: nightly
            name: i686-pc-windows-msvc-nightly

          # Windows GNU 32 and 64bit
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            rust_version: nightly
            host: -x86_64-pc-windows-gnu
            name: i686-pc-windows-gnu-nightly
          - os: windows-latest
            target: i686-pc-windows-gnu
            rust_version: nightly
            host: -i686-pc-windows-gnu
            name: i686-pc-windows-gnu-nightly

          # Linux 32 and 64bit
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rust_version: nightly
            name: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            rust_version: nightly
            name: i686-unknown-linux-gnu

          # OSX 64bit
          - os: macos-latest
            target: x86_64-apple-darwin
            rust_version: nightly
            name: x86_64-apple-darwin

          # TODO: once WASM is possible, test it

    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-C debuginfo=0"

    steps:
      - uses: actions/checkout@v1
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust_version }}${{ matrix.platform.host }}
          targets: ${{ matrix.target }}

      # Run tests in debug mode
      - name: Run Tests Debug
        run: cargo test --target ${{ matrix.target }}

      # Run tests in release mode
      - name: Run Tests Release
        run: cargo test --release --target ${{ matrix.target }}

      # Cache Cargo
      - name: Cache Cargo
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ matrix.rust_version }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      # Cache Build
      - name: Cache Build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ matrix.rust_version }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
