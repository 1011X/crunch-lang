name: CI

on:
  pull_request:
    paths:
      - "**.rs"
      - "**.toml"
      - ".github/workflows/*.yml"
  push:
    branches: [master, dev]
    paths:
      - "**.rs"
      - "**.toml"
      - ".github/workflows/*.yml"

jobs:
  Checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: nightly
          components: rustfmt
        
      # Check that formatting is valid
      - name: Check Formatting
        run: cargo fmt --all -- --check
        
      # Check that documentation is valid
      - name: Check documentation
        shell: bash
        run: cargo doc --no-deps --target ${{ matrix.target }} --features $FEATURES

  Tests:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        rust_version: [nightly]        
        include:
          # Windows MSVC 32 and 64bit
          - { target: x86_64-pc-windows-msvc, os: windows-latest }
          - { target: i686-pc-windows-msvc, os: windows-latest }

          # Windows GNU 32 and 64bit
          - { target: x86_64-pc-windows-gnu, os: windows-latest, host: -x86_64-pc-windows-gnu }
          - { target: i686-pc-windows-gnu, os: windows-latest, host: -i686-pc-windows-gnu }

          # Linux 32 and 64bit
          - { target: i686-unknown-linux-gnu, os: ubuntu-latest }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest }

          # OSX 64bit
          - { target: x86_64-apple-darwin, os: macos-latest }

          # TODO: once WASM is possible, test it

    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-C debuginfo=0"
      FEATURES: ${{ format(',{0}', matrix.features ) }}

    steps:
      - uses: actions/checkout@v1
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust_version }}${{ matrix.platform.host }}
          targets: ${{ matrix.platform.target }}

      # Run tests in debug mode
      - name: Run tests debug
        shell: bash
        run: cargo test --verbose --target ${{ matrix.target }} --features $FEATURES
      
      # Run tests in release mode
      - name: Run tests release
        shell: bash
        run: cargo test --release --verbose --target ${{ matrix.target }} --features $FEATURES
        
      # Cache Cargo
      - name: Cache Cargo
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: nightly-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      # Cache Build
      - name: Cache Build
        uses: actions/cache@v1
        with:
          path: target
          key: nightly-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
