fn main()
    let i = 0

    eval(i)

    :: let i = print_something<int, str>(test)
end

fn eval(num: int)
    if num == 0
        println("Zero")
        eval(1)
    else if num == 1
        println("One")
        eval(2)
    else if num == 2
        println("Two")
        eval(3)
    else if num == 3
        println("Three")
        eval(4)
    else if num == 4
        println("Four")
        eval(5)
    else if num == 5
        println("Five")
        eval(6)
    else
        println("We're done here!")
    end
end

:: fn print_int(integer: int)
::     print(integer)
:: end
:: 
:: fn generic_function<T, E>(i: T) -> E
::     :: return 1
::     empty
:: end
:: 
:: exposed fn exposed_generic_function<T, E>(i: T) -> E
::     empty
:: end
:: 
:: type Test<T, E>
::     member1: int
::     member2: str
::     member3: T
::     member4: E
:: 
::     fn test() -> T
::         println("Hello from Test!")
::     end
:: 
::     fn else_to_hell()
::         let i = 10
:: 
::         i = 5
:: 
::         if 1 == 10
::             empty
::         else if 3 != 4
::             empty
::         else if 3 >= 5
::             empty
::         else if 6 <= 1
::             empty
::         else if 6 < 5
::             empty
::         else if 5 > 5
::             empty
::         else
::             empty
::         end
::     end
:: end
:: 
:: exposed type ExposedType<T, E>
::     exposed member1: int
::     member2: str
:: 
::     exposed fn test() -> T
::         println("Hello from Test!")
::     end
:: end
