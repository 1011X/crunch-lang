:: The main function
fn main()
    let integer: int = 0

    if is_zero(integer) == true
        println("Zero")
    else
        println("Not Zero")
    end

    for i in 0..5
        println(i)
    end
end

:: See if an integer is zero
exposed fn is_zero(integer: int) -> bool
    if integer == 0
        return true
    else
        return false
    end
end

:: fn generic_function<T, E>(i: T) -> E
::     :: return 1
::     empty
:: end
:: 
:: exposed fn exposed_generic_function<T, E>(i: T) -> E
::     empty
:: end
:: 
:: type Test<T, E>
::     member1: int
::     member2: str
::     member3: T
::     member4: E
:: 
::     fn test() -> T
::         println("Hello from Test!")
::     end
:: 
::     fn else_to_hell()
::         let i = 10
:: 
::         i = 5
:: 
::         if 1 == 10
::             empty
::         else if 3 != 4
::             empty
::         else if 3 >= 5
::             empty
::         else if 6 <= 1
::             empty
::         else if 6 < 5
::             empty
::         else if 5 > 5
::             empty
::         else
::             empty
::         end
::     end
:: end
:: 
:: exposed type ExposedType<T, E>
::     exposed member1: int
::     member2: str
:: 
::     exposed fn test() -> T
::         println("Hello from Test!")
::     end
:: end
