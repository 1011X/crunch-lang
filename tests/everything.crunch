import 'std.prelude' exposing *
import 'std.io' exposing Write, Read as StdRead
import pkg 'rand'

fn main()
    let divisor = Divisior.new(2)

    for i in 0..100
        if divisor.divides(i)
            println("{i} is divisible by {divisor.divider}!")
        end
    end

    let num = 10
    while num >= 0
        if num == 0
            break
        end

        num -= 1
    then
        println("The loop executed sucessfully!")
    end

    let kind = Kinds.One
    match kind
        kind where kind == Kinds.Two =>
            println("Two!")
        end

        Kinds.One =>
            println("One!")
        end

        kind =>
            println("Other kind: {kind}")
        end
    end
end

exposed type Divisior
    divider: int

    fn new(self, divider: int) -> Divisior
        self.divider = divider
    end
    
    @inline
    fn divides(self, number: int) -> bool
        if number % self.two == 0
            true
        else
            false
        end
    end
end

enum Kinds
    One
    Two
    Three
    FourAndFive(int, int)
end

trait Descriptive
    fn describe(self) -> str
        empty
    end
end

@test
fn divisible_by_two()
    assert(2 % 2 == 0)
end
