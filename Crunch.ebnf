Program ::=
    ( FunctionDeclaration
    | TypeDeclaration
    | EnumDeclaration
    | TraitDeclaration
    | Import
    )*

/* Function Declarations */
FunctionDeclaration ::= Decorator* Attibute* 'fn' Ident Generics? '(' FunctionArguments? ')' ( '->' Ident )? '\n' Statement+ 'end'
FunctionArguments ::= AbscriptedArg | AbscriptedArg ',' FunctionArguments
AbscriptedArg ::= Ident ( ':' Ident )?

/* Type Declarations */
TypeDeclaration ::= Decorator* Attibute* 'type' Ident Generics? '\n' TypeArguments? FunctionDeclaration* 'end'
TypeArguments ::= TypeArg '\n' | TypeArg '\n' TypeArguments
TypeArg ::= Attibute* Ident ':' Ident

/* Enum Declarations */
EnumDeclaration ::= Decorator* Attibute* 'enum' Ident Generics? '\n' EnumVariant* 'end'
EnumVariant ::= UnitVariant | TupleVariant

UnitVariant ::= Ident '\n'

TupleVariant ::= Ident '(' TupleVariantParams? ')' '\n'
TupleVariantParams ::=  Ident | Ident ',' TupleVariantParams

/* Trait Declarations */
TraitDeclaration ::= Decorator* Attribute* 'trait' Ident Generics? '\n' FunctionDeclaration* 'end'

/* Imports */
Import ::= 'import' ImportDestination? String ( 'exposing' ( '*' | ImportMembers? ) | 'as' Ident ) '\n'
ImportMembers ::= ImportMemberArg | ImportMemberArg ',' ImportMembers
ImportMemberArg ::= Ident ( 'as' Ident )?
ImportDestination ::= 'lib' | 'pkg'

/* Decorators, Attibutes & Generics */
Decorator ::= '@' Ident ( '(' DecoratorArgs? ')' )? '\n'
DecoratorArgs ::= Expr | DecoratorArgs ',' Expr

Attribute ::= Visibility
Visibility ::= 'exposed' | 'lib'

Generics ::= '<' GenericParam? '>'
GenericParam ::= Ident | Ident ',' GenericParam

/* Idents */
Ident ::= [a-zA-Z_][a-zA-Z0-9_]*

/* Literals */
Literal ::= String | Boolean | Integer | Float

/* String Literals */
String ::= StringPrefix? StringDelim [^StringDelim]* StringDelim
StringPrefix ::= 'b'
StringDelim ::= '"' | "'" | '"""' | "'''"

/* Boolean Literals */
Boolean ::= 'true' | 'false'

/* Integer Literals */
Integer ::= Sign? ( Digits | '0x' HexDigits ) 
Sign ::= '-' | '+'
Digits ::= [0-9][0-9_]*
HexDigits ::= [0-9a-fA-F][0-9a-fA-F_]*
IntSuffix ::= 'byte' | 'int'

/* Float Literals */
Float ::= Sign? ( DecimalFloat | HexFloat )

/* Decimal Float Literals */
DecimalFloat ::= 
    Digits '.' Digits? DecimalExp? DecimalFloatSuffix?
    | Digits DecimalExp DecimalFloatSuffix?
    | Digits DecimalExp? DecimalFloatSuffix
DecimalExp ::= DecimalExpIndicator Sign? Digits
DecimalExpIndicator ::= 'e' | 'E'
DecimalFloatSuffix ::= 'f' | 'F'

/* Hex Float Literals */
HexFloat ::= '0x' HexDigits '.' ?HexFloatExp?
HexFloatExp ::= HexFloatExpIndicator Sign? Digits
HexFloatExpIndicator ::= 'p' | 'P'

/* Expressions */
Expr ::= 
    Literal
    | Unary
    | Range
    | Comparison
    | BinaryOperation
    | Ident
    | '(' Expr ')'
    | IndexArray
    | InlineConditional
    | FunctionCall
    | Array
    | Assignment

Unary ::= ( '+' | '-' | '!' ) Expr

Range ::= Expr '..' Expr

Array ::= '[' ArrayElements? ']'
ArrayElements ::= Expr | ArrayElements ',' Expr

IndexArray ::= Expr '[' Expr ']'

InlineConditional ::= Expr 'if' Expr 'else' Expr

FunctionCall ::= ( Expr '.' )? Expr '(' FunctionCallArgs? ')'
FunctionArgs ::= Expr | FunctionArgs ',' Expr

BinaryOperation ::= Expr BinaryOperand Expr
BinaryOperand ::= 
    '+' | '-' | '*' | '/' | '%' | '**' 
    | '^' | '|' | '&' | '<<' | '>>'

Comparison ::= Expr Comparator Expr
Comparator ::= '==' | '!=' | '<=' | '>=' | '<' | '>'

Assignment ::= Ident Assigner Expr '\n'
Assigner ::= '=' | BinaryOperand '='

/* Statements */
Statement ::= 
    While
    | Loop
    | For
    | If
    | Match
    | VarDecl
    | Return
    | Continue
    | Break
    | Expr '\n'
    | 'empty'

Return ::= 'return' Expr? '\n'
Continue ::= 'continue' '\n'
Break ::= 'break' Expr? '\n'

Match ::= 'match' Expr '\n' ( Ident ( 'where' Expr )? '=>' '\n' Statement+ )+ 'end'

If ::= 'if' Expr '\n' Statement+ '\n' ElseIf* Else? 'end'
ElseIf ::= 'else' 'if' Expr '\n' Statement+
Else ::= 'else' '\n' Statement+

While ::= 'while' Expr '\n' Statement+ ThenClause? 'end'
Loop ::= 'loop' '\n' Statement+ ThenClause? 'end'
For ::= 'for' Expr 'in' Expr '\n' Statement+ ThenClause?  'end'
ThenClause ::= 'then' '\n' Statement+

VarDecl ::= 'let' Ident ( ':' Ident )? '=' Expr '\n'
