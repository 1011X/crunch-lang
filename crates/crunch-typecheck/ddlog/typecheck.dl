import hir

extern function dbg(thing: 'T): 'T

input relation Items(id: ItemId, item: Item)
input relation Functions(func_id: FuncId, func: Function)
input relation Statements(stmt_id: StmtId, stmt: Stmt)
input relation Expressions(expr_id: ExprId, expr: Expr)
input relation Variables(var_id: VarId, decl: VariableDecl)
// Variable scoping relations (includes function pointers)
input relation VariableScopes(parent: ScopeId, child: ScopeId)
input relation Types(type_id: TypeId, ty: Type)

// TODO: Typed errors
output relation Errors(message: string)

// Get the type of all literals within the program
relation Literals(lit: Intern<Literal>, lit_type: TypeId)
Literals(lit, lit_type) :- Expressions(_, Expr { ExprLit { lit } }),
                           var ty = lit.type_of(),
                           Types(lit_type, ty).

relation VariablesInScope(scope: ScopeId, var_id: VarId, decl_scope: ScopeId)
VariablesInScope(scope, var_id, scope) :- Variables(var_id, VariableDecl { .scope = scope }).
VariablesInScope(child, var_id, decl_scope) :- VariablesInScope(parent, var_id, decl_scope),
                                               VariableScopes(parent, child).

relation TypedExpressions(expr_id: ExprId, type_id: TypeId)
// Literals
TypedExpressions(expr_id, type_id) :- Expressions(expr_id, Expr { ExprLit { lit } }),
                                      var ty = lit.type_of(),
                                      Types(type_id, ty).
// Variables
TypedExpressions(expr_id, type_id) :- Expressions(expr_id, Expr { ExprVar { var_id } }),
                                      Variables(var_id, VariableDecl { .var_type = type_id }).

// Assignments
TypedExpressions(assign_id, type_id), TypedExpressions(rhs_id, type_id) :-
    Expressions(assign_id, Expr { ExprAssign { var_id, rhs_id } }),
    Variables(var_id, VariableDecl {}),
    TypedExpressions(rhs_id, type_id).

relation UnifiedTypes(expr_id: ExprId, type_id: TypeId)
UnifiedTypes(expr_id, unified_type) :-
    TypedExpressions(expr_id, type_id),
    Types(type_id, ty),
    var unified_type = Aggregate((expr_id), unify_types((type_id, ty))).

function unify_types(types: Group<'K, (TypeId, Type)>): TypeId {
    for (ty in types) {
        dbg(ty);
    };

    1
}
