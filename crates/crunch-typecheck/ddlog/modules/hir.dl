typedef Var = u64

typedef ExprId = u64
typedef FileId = u32

// TODO: Derive types to datalog
// FIXME: TypeId instead of Intern<TypeKind>
// FIXME: StmtId instead of Intern<Stmt>
// FIXME: FuncId instead of Intern<Function>
// FIXME: ScopeId instead of Intern<Scope>
// FIXME: LiteralId instead of Intern<Literal>
// TODO: Hook into `tracing` for logs

// TODO: Write rust hook into `lasso` for debug printing and actual interning
typedef StrT = u32
typedef ItemPath = Intern<Vec<StrT>>

// TODO: Actually put spans in structs
typedef Span = Span { start: u32, end: u32 }
typedef Location = Location {
    span: Span,
    file: FileId
}

typedef ExprKind =
    ExprLit { lit: Intern<Literal> }
    | ExprVar { variable: Var }
    | ExprAssign { variable: Var, expr_id: ExprId }
    | ExprMatch { match_: Match }
    | ExprScope { block: Intern<Stmt> }
    | ExprReturn { val: Option<ExprId> }
    | ExprBinOp { op: BinaryOp }

typedef Match = Match {
    cond : ExprId,
    arms : Vec<MatchArm>,
    ty   : Intern<TypeKind>
}

typedef MatchArm = MatchArm {
    bind  : Binding,
    guard : Option<ExprId>,
    body  : Intern<Stmt>,
    ty    : Intern<TypeKind>
}

typedef Binding = Binding {
    reference : bool,
    mutable   : bool,
    pattern   : Pattern,
    ty        : Option<Intern<TypeKind>>
}

typedef Pattern = PatLit { lit: Literal, ty: Intern<TypeKind> }
                  | Ident

typedef BinaryOp = BinaryOp {
    lhs : ExprId,
    op  : BinOp,
    rhs : ExprId
}

typedef BinOp =
    Mult
    | Div
    | Add
    | Sub
    | Mod
    | Pow
    | BitAnd
    | BitOr
    | BitXor
    | Shl
    | Shr

typedef TypeKind =
    Unknown
    | Str
    | Bool
    | Unit
    | Absurd
    | Error
    | Int { is_signed : Option<bool>
          , width     : Option<u16> }

function is_unknown(kind: Intern<TypeKind>): bool {
    kind == intern(Unknown)
}

function is_int(ty: Intern<TypeKind>): bool {
    match (ty.ival()) {
        Int {} -> true,
        _      -> false
    }
}

typedef Literal =
    String { str: string }
    | Boolean { boolean: bool }
    | Integer { int: u64 }

function is_str(ty: Intern<Literal>): bool {
    match (ty.ival()) {
        String {} -> true,
        _         -> false
    }
}

function is_bool(ty: Intern<Literal>): bool {
    match (ty.ival()) {
        Boolean {} -> true,
        _          -> false
    }
}

function is_int(ty: Intern<Literal>): bool {
    match (ty.ival()) {
        Integer {} -> true,
        _          -> false
    }
}

function typeof(literal: Intern<Literal>): Intern<TypeKind> {
    var ty = match (literal.ival()) {
        String  { } -> Str,
        Boolean { } -> Bool,
        Integer { } -> Int { None, None }
    };

    intern(ty)
}

typedef Vis = FileLocal | Package | Exposed

typedef FuncArg = FuncArg {
    name: Var,
    kind: Intern<TypeKind>
}

typedef Function = Function {
    name : ItemPath,
    vis  : Vis,
    args : Vec<FuncArg>,
    body : Intern<Stmt>,
    ret  : Intern<TypeKind>
}

typedef Stmt = StmtExpr { expr: ExprId }
               | StmtItem { item: Item }
               | StmtSeq { first: Intern<Stmt>, second: Intern<Stmt> }
               | StmtDecl { decl: VarDecl }
               | Empty
    
typedef VarDecl = VarDecl {
    name    : Var,
    value   : ExprId,
    mutable : bool,
    ty      : Intern<TypeKind>
}

typedef Item = ItemFunc { func: Function } | ItemStruct {}

typedef Signature = FuncSig { args: Vec<FuncArg>, ret: Intern<TypeKind> }

function signature(item: Item): Signature {
    // FIXME: Module scoping for the path
    // TODO: Structs & stuff
    // TODO: Trait impls on stuff
    match (item) {
        ItemFunc { Function { .args = args, .ret = ret }} -> FuncSig { args, ret },
        // FIXME: Do this
        ItemStruct { } -> FuncSig { vec_empty(), intern(Unknown) }
    }
}

function corrected_signature(item: Item): Signature {
    // FIXME: Module scoping for the path
    // TODO: Structs & stuff
    // TODO: Trait impls on stuff
    match (item) {
        ItemFunc { Function { .args = old_args, .ret = ret }} -> {
            var ret = if (ret.is_unknown()) {
                intern(Error)
            } else {
                ret
            };

            var args = vec_with_capacity(old_args.len());
            for (arg in old_args) {
                var arg = if (arg.kind.is_unknown()) {
                    FuncArg { arg.name, intern(Error) }
                } else {
                    arg
                };

                args.push(arg)
            };

            FuncSig { args, ret }
        },
        // FIXME: Do this
        ItemStruct { } -> FuncSig { vec_empty(), intern(Unknown) }
    }
}

function path(item: Item): ItemPath {
    // FIXME: Module scoping for the path
    // TODO: Structs & stuff
    // TODO: Trait impls on stuff
    match (item) {
        ItemFunc { Function { .name = path }} -> path,
        // FIXME: Do this
        ItemStruct { } -> intern(vec_empty())
    }
}

function has_unknown_types(item: Item): bool {
    match (item) {
        ItemFunc { Function { .args = args, .ret = ret }} -> {
            if (ret.is_unknown()) { return true };

            for (arg in args) {
                if (arg.kind.is_unknown()) {
                    return true
                }
            };

            false
        },

        // FIXME: Do this
        ItemStruct { } -> false
    }
}

function unknown_type_errors(item: Item): Vec<string> {
    match (item) {
        ItemFunc { func } -> {
            var errors = vec_empty();
            for (arg in func.args) {
                if (arg.kind.is_unknown()) {
                    errors.push("Function arguments cannot be unknown")
                }
            };

            if (func.ret.is_unknown()) {
                errors.push("Function return types cannot be unknown")
            };

            errors
        },

        // FIXME: Do this
        ItemStruct {} -> vec_empty()
    }
}

typedef Scope = ScopeFunction { func: Intern<Function> }
                | ScopeSeq1 { parent: Intern<Scope> } 
                | ScopeSeq2 { parent: Intern<Scope> }

