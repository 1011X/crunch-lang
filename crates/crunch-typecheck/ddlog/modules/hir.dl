typedef Var = u64

typedef ItemId = u64
typedef FuncId = u64
typedef StmtId = u64
typedef ExprId = u64
typedef FileId = u32

// TODO: Derive types to datalog
// FIXME: TypeId instead of Intern<TypeKind>
// FIXME: ScopeId instead of Intern<Scope>
// FIXME: LiteralId instead of Intern<Literal>
// TODO: Hook into `tracing` for logs

// TODO: Write rust hook into `lasso` for debug printing and actual interning
typedef StrT = u32
typedef ItemPath = Intern<Vec<StrT>>

// TODO: Actually put spans in structs
typedef Span = Span { start: u32, end: u32 }
typedef Location = Location {
    span: Span,
    file: FileId
}

typedef ExprKind =
    ExprLit { lit: Intern<Literal> }
    | ExprVar { variable: Var }
    | ExprAssign { variable: Var, expr_id: ExprId }
    | ExprMatch { match_: Match }
    | ExprScope { block: StmtId }
    | ExprReturn { val: Option<ExprId> }
    | ExprBinOp { op: BinaryOp }

typedef Match = Match {
    cond : ExprId,
    arms : Vec<MatchArm>,
    ty   : Intern<TypeKind>
}

typedef MatchArm = MatchArm {
    bind  : Binding,
    guard : Option<ExprId>,
    body  : StmtId,
    ty    : Intern<TypeKind>
}

typedef Binding = Binding {
    reference : bool,
    mutable   : bool,
    pattern   : Pattern,
    ty        : Option<Intern<TypeKind>>
}

typedef Pattern = PatLit { lit: Literal, ty: Intern<TypeKind> }
                  | Ident

typedef BinaryOp = BinaryOp {
    lhs : ExprId,
    op  : BinOp,
    rhs : ExprId
}

typedef BinOp =
    Mult
    | Div
    | Add
    | Sub
    | Mod
    | Pow
    | BitAnd
    | BitOr
    | BitXor
    | Shl
    | Shr

typedef TypeKind =
    Unknown
    | Str
    | Bool
    | Unit
    | Absurd
    | Error
    | Int { is_signed : Option<bool>
          , width     : Option<u16> }

function is_unknown(kind: Intern<TypeKind>): bool {
    kind == intern(Unknown)
}

function is_int(ty: Intern<TypeKind>): bool {
    match (ty.ival()) {
        Int {} -> true,
        _      -> false
    }
}

typedef Literal =
    String { str: string }
    | Boolean { boolean: bool }
    | Integer { int: u64 }

function is_str(ty: Intern<Literal>): bool {
    match (ty.ival()) {
        String {} -> true,
        _         -> false
    }
}

function is_bool(ty: Intern<Literal>): bool {
    match (ty.ival()) {
        Boolean {} -> true,
        _          -> false
    }
}

function is_int(ty: Intern<Literal>): bool {
    match (ty.ival()) {
        Integer {} -> true,
        _          -> false
    }
}

function typeof(literal: Intern<Literal>): Intern<TypeKind> {
    var ty = match (literal.ival()) {
        String  { } -> Str,
        Boolean { } -> Bool,
        Integer { } -> Int { None, None }
    };

    intern(ty)
}

typedef Vis = FileLocal | Package | Exposed

typedef FuncArg = FuncArg {
    name: Var,
    kind: Intern<TypeKind>
}

typedef Function = Function {
    name : ItemPath,
    vis  : Vis,
    args : Vec<FuncArg>,
    body : StmtId,
    ret  : Intern<TypeKind>
}

function corrected_signature(func: Intern<Function>): Signature {
    // FIXME: Module scoping for the path
    Function { .args = var old_args, .ret = var ret } = func.ival();

    var ret = if (ret.is_unknown()) {
        intern(Error)
    } else {
        ret
    };

    var args = vec_with_capacity(old_args.len());
    for (arg in old_args) {
        var arg = if (arg.kind.is_unknown()) {
            FuncArg { arg.name, intern(Error) }
        } else {
            arg
        };

        args.push(arg)
    };

    FuncSig { args, ret }
}

function has_unknown_types(func: Intern<Function>): bool {
    Function { .args = var args, .ret = var ret } = func.ival();

    if (ret.is_unknown()) { return true };

    for (arg in args) {
        if (arg.kind.is_unknown()) {
            return true
        }
    };

    false
}

function path(func: Intern<Function>): ItemPath {
    // FIXME: Module scoping for the path
    Function { .name = var path } = func.ival();
    path
}

function signature(func: Intern<Function>): Signature {
    // FIXME: Module scoping for the path
    Function { .args = var args, .ret = var ret } = func.ival();
    FuncSig { args, ret }
}

function unknown_type_errors(func: Intern<Function>): Vec<string> {
    var func = func.ival();

    var errors = vec_empty();
    for (arg in func.args) {
        if (arg.kind.is_unknown()) {
            errors.push("Function arguments cannot be unknown")
        }
    };

    if (func.ret.is_unknown()) {
        errors.push("Function return types cannot be unknown")
    };

    errors
}

typedef Stmt = StmtExpr { expr: ExprId }
               | StmtItem { item: ItemId }
               | StmtSeq { first: StmtId, second: StmtId }
               | StmtDecl { decl: VarDecl }
               | Empty
    
typedef VarDecl = VarDecl {
    name    : Var,
    value   : ExprId,
    mutable : bool,
    ty      : Intern<TypeKind>
}

typedef Item = ItemFunc { func: FuncId } | ItemStruct {}

typedef Signature = FuncSig { args: Vec<FuncArg>, ret: Intern<TypeKind> }

typedef Scope = ScopeFunction { func: FuncId }
                | ScopeSeq1 { parent: Intern<Scope> } 
                | ScopeSeq2 { parent: Intern<Scope> }
                // FIXME: Don't really know how to generate scopes on the rust side
                | ScopeToDo

