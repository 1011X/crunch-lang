-- The operation that a transformation actually does
let Operation =
    -- Creates the provided variant
    < Create : Text
    -- Replaces one variant with another, removing `inputVariant` and creating the provided one
    | Replace : Text
    -- Merges two variants together, removing `inputVariant` and treating function output
    -- as the provided variant
    | Merge : Text
    -- A scanning transform, doesn't create any new variants or remove any
    | Scan >

-- A transformation made during a pass
let Transformation =
    { Type = 
        -- This variant of the enum this transformation uses
        { inputVariant   : Text
        -- The operation this transformation preforms
        , operation      : Operation
        -- The user defined function that's called for this transformation
        , userFunction   : Text }
    , default = { operation = Operation.Scan }
    }

-- The context passed to each user function (and also required by the generated ones)
let Context =
    -- No extra context is passed
    < None
    -- A mutable reference to the provided context is passed
    | Mutable : Text
    -- An immutable reference to the provided context is passed
    | Immutable : Text >

-- The visibility of a generated item
let Visibility =
    -- The default visibility for Rust (usually private)
    < Private
    -- `pub`
    | Public
    -- `pub(crate)`
    | Crate
    -- `pub(super)`
    | Super >

-- One pass of the compiler
let Pass =
    -- The name of the pass
    { Type =
        -- The pass's name
        { name            : Text
        -- The pass's description
        , description     : Optional Text
        -- The name of the function that will be generated
        , functionName    : Text
        -- The visibility of the generated function
        , functionVis     : Visibility
        -- The context passed to the function, this means any functions called and generated by this pass
        -- will also require and be passed the context
        , functionContext : Context
        -- The enum that is being operated on
        , inputEnum       : Text
        -- The enum created by this pass, can only be None if every transformation is a Scan
        , outputEnum      : Optional Text
        -- The transformations preformed during this pass
        , transformations : List Transformation.Type }
    , default = 
        { description     = None Text
        , functionVis     = Visibility.Private
        , functionContext = Context.None
        , outputEnum      = None Text }
    }

-- The nanopass configuration
let Config = 
    { Type    = { logging : Bool }
    , default = { logging = False }
    }

let Nanopass =
    -- The configuration of the nanopass itself
    { Type =
        { config : Config.Type
        , passes : List Pass.Type }
    , default = { config = Config::{=} }
    }

-------------------- User code --------------------

let usizeToU8 : Transformation.Type =
    { inputVariant = "UsizeVariant"
    , operation    = Operation.Replace "U8Variant(u8)"
    , userFunction = "super::mutate_usize_variant" }

let replaceYouEight : Pass.Type =
    { name            = "Replace UsizeVariant"
    , description     = Some "Replaces `UsizeVariant` with `U8Variant`"
    , functionName    = "replace_you_eight"
    , functionVis     = Visibility.Private
    , functionContext = Context.Mutable "super::Context"
    , inputEnum       = "TestAst"
    , outputEnum      = Some "Phase2Ast"
    , transformations = [ usizeToU8 ] }

in Nanopass::{ passes = [ replaceYouEight ] }
